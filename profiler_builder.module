<?php
/**
 * Implements hook_permission().
 */
function profiler_builder_permission() {
    return array('administer profiler builder' => array(
    'title' => 'Administer profiler builder',
    'description' => 'Administer profiler builder',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function profiler_builder_menu() {
  $items = array();
  $items['admin/config/development/profiler_builder'] = array(
    'title' => 'Profiler Builder',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_profiler_builder_settings'),
    'description' => 'Build distribution files from current settings',
    'access arguments' => array('administer profiler builder'),
  );
  return $items;
}

/**
 * Implements hook_settings().
 */
function _profiler_builder_settings() {
  $form = array();
  // call helper function to populate the three fields
  _profiler_builder_info_file($info, $vars, $drush);
  // info file
  $form['info_file'] = array(
    '#weight' => '-1',
    '#description' => t('This is what the .info file would look like if you were to make a distribution off of this site as it exists currently.'),
    '#collapsed' => '1',
    '#type' => 'fieldset',
    '#collapsible' => '1',
    '#title' => t('.info file'),
  );
  $form['info_file']['info_file_contents'] = array(
    '#description' => t('Copy this into your .info file for the distribution you are making'),
    '#weight' => '0',
    '#type' => 'textarea',
    '#title' => t('File contents'),
    '#value' => $info,
  );
  $form['info_file']['vars'] = array(
    '#description' => t('Cheatsheet for all variables'),
    '#weight' => '1',
    '#type' => 'textarea',
    '#title' => t('Variables'),
    '#value' => $vars,
  );
  // drush make
  $form['drush_file'] = array(
    '#weight' => '0',
    '#description' => t('This is what the .make file would look like if you were to make a distribution off of this site as it exists currently.'),
    '#collapsed' => '1',
    '#type' => 'fieldset',
    '#collapsible' => '1',
    '#title' => t('.make file'),
  );
  $form['drush_file']['drush_file_contents'] = array(
    '#description' => t('Copy this into your .make file for the distribution you are making'),
    '#weight' => '1',
    '#type' => 'textarea',
    '#title' => t('File contents'),
    '#value' => $drush,
  );
  return $form;
}

/**
 * Helper to build out the file pieces
 */
function _profiler_builder_info_file(&$info, &$vars, &$drush) {
  $system = array();
  $data = array();
  $project_data = array();
  // build the array we need
  $result = db_select('system', 's')
  ->fields('s', array('status', 'type', 'name', 'info'))
  ->condition('s.status', 1, '=')
  ->condition('s.type', 'module', '=')
  ->execute();
  foreach ($result as $val) {
    $system[$val->name] = unserialize($val->info);
  }
  // remove install profile as it lists as a module
  if (isset($system[variable_get('install_profile', 'standard')])) {
    unset($system[variable_get('install_profile', 'standard')]);
  }
  // build the make file project data with everything
  foreach ($system as $module => $info) {
    //account for the other package in module listing
    if (!isset($info['package'])) {
      $info['package'] = 'Other';
    }
    // build projects array to exclude sub-modules
    if (isset($info['project'])) {
      $project_data[$info['package']][$info['project']] = $info['version'];
    }
    else {
      $project_data[$info['package']][$module] = $info['version'];
    }
  }
  // allow modification to module build list
  drupal_alter('profiler_builder_modules_list', $system);
  // convert data
  foreach ($system as $module => $info) {
    //account for the other package in module listing
    if (!isset($info['package'])) {
      $info['package'] = 'Other';
    }
    $data[$info['package']][$module] = $info['version'];
  }
  // alphabetical order of modules / packages
  ksort($data);
  foreach ($data as $key => $package) {
    ksort($data[$key]);
  }
  // alphabetical order of project data / packages
  ksort($project_data);
  foreach ($project_data as $key => $package) {
    ksort($project_data[$key]);
  }
  // move features to the end if set to avoid conflicts
  if (isset($data['Features'])) {
    $tmp = $data['Features'];
    unset($data['Features']);
    $data['Features'] = $tmp;
    // move features module ahead of features themselves
    $tmp = array('features' => $data['Features']['features']);
    $data['Features'] = array_merge($tmp, $data['Features']);
  }
  // info file of required modules
  $info = '';
  foreach ($data as $package => $projects) {
    $info .= "; $package\n";
    foreach ($projects as $project => $version) {
      $info .= "dependencies[] = $project\n";
    }
  }
  // variables
  $vars = "; Variables\n\n";
  // array of values we know to ignore automatically
  $ignore_list = _profiler_builder_ignore_list();
  // ignore list as well as all theme settings
  $result = db_select('variable', 'v')
  ->fields('v', array('name'))
  ->condition('v.name', $ignore_list, 'NOT IN')
  ->condition('v.name', 'theme_%_settings', 'NOT LIKE')
  ->condition('v.name', 'color_%', 'NOT LIKE')
  ->execute();
  // loop through and build values array
  foreach ($result as $value) {
    // ignore NULL values
    if (variable_get($value->name, '') != '') {
      $vals[$value->name] = variable_get($value->name, '');
    }
  }
  // allow for overriding of variable values
  drupal_alter('profiler_builder_variables', $vals);
  // loop through and rebuild array values
  foreach ($vals as $var_name => $val) {
    if (is_array($val)) {
      foreach ($val as $key => $ary_val) {
        if (is_array($ary_val)) {
          foreach ($ary_val as $key2 => $ary_val2) {
            if (is_array($ary_val2)) {
              foreach ($ary_val2 as $key3 => $ary_val3) {
                if (is_array($ary_val3)) {
                  foreach ($ary_val3 as $key4 => $ary_val4) {
                    $vars .= 'variables[' . $var_name . '][' . $key . '][' . $key2 . '][' . $key3 . '][' . $key4 . '] = ' . var_export($ary_val4, TRUE) . "\n";
                  }
                }
                else {
                  $vars .= 'variables[' . $var_name . '][' . $key . '][' . $key2 . '][' . $key3 . '] = ' . var_export($ary_val3, TRUE) . "\n";
                }
              }
            }
            else {
              $vars .= 'variables[' . $var_name . '][' . $key . '][' . $key2 . '] = ' . var_export($ary_val2, TRUE) . "\n";
            }
          }
        }
        else {
          $vars .= 'variables[' . $var_name . '][' . $key . '] = ' . var_export($ary_val, TRUE) . "\n";
        }
      }
    }
    else {
      $vars .= 'variables[' . $var_name . '] = ' . var_export($val, TRUE) . "\n";
    }
  }
  // drush make file build via browser
  $drush = '';
  $no_version = '';
  foreach ($project_data as $package => $projects) {
    // skip core modules
    if ($package != 'Core') {
      foreach ($projects as $project => $version) {
        // if there's no version, add it to the end
        if (empty($version)) {
          $no_version .= 'projects[' . $project . '][version] = "' . str_replace('7.x-', '', $version) . '"' . "\n";
          $no_version .= 'projects[' . $project . '][subdir] = "custom"' . "\n";
        }
        else {
          $version = str_replace('7.x-', '', $version);
          // use true dev instead of specific build
          if (strpos($version, '-dev')) {
            $version = substr($version, 0, (strpos($version, '.')+1)) . 'x-dev';
          }
          $drush .= 'projects[' . $project . '][version] = "' . $version . '"' . "\n";
          $drush .= 'projects[' . $project . '][subdir] = "contrib"' . "\n";
        }
      }
    }
  }
  $drush .= "; -- Modules without versions -- \n". $no_version;
}

/**
 * Helper function to gather ignored values
 */
function _profiler_builder_ignore_list() {
  $ignore_list = array(
    'features_codecache',
    'views_block_hashes',
    'drupal_private_key',
    'cache_content_flush_cache_page',
    'cache_content_flush_cache_block',
    'cache_flush_cache_update',
    'cron_key',
    'cron_last',
    'css_js_query_string',
    'email__active_tab',
    'install_profile',
    'install_task',
    'install_time',
    'menu_masks',
    'site_mail',
    'update_last_check',
    'wipe_rebuild',
    'update_notify_emails',
    'clean_url',
    'file_temporary_path',
    'ctools_last_cron',
    'node_cron_last',
    'user_admin_role',
    'theme_settings',
    'site_name',
    'site_slogan',
    'site_default_country',
    'page_compression',
    'cache',
    'cache_lifetime',
    'page_cache_maximum_age',
    'cdn_farfuture_unique_identifier_mapping',
    'cdn_basic_mapping',
    'cdn_mode',
    'isbn2node_isbndb_access_key',
  );
  // allow modification via profiler_builder_ignore_alter
  drupal_alter('profiler_builder_ignore', $ignore_list);
  return $ignore_list;
}

/**
 * Implements hook_profiler_builder_modules_list_alter().
 */
function profiler_builder_profiler_builder_modules_list_alter(&$modules) {
  // remove developer modules from output
  foreach ($modules as $key => $project) {
    if ($project['package'] == 'Development') {
      unset($modules[$key]);
    }
  }
  // disable boost if enabled
  if (isset($modules['boost'])) {
    unset($modules['boost']);
  }
  // disable cdn if enabled
  if (isset($modules['cdn'])) {
    unset($modules['cdn']);
  }
}

/**
 * Implements hook_profiler_builder_variables_alter().
 */
function profiler_builder_profiler_builder_variables_alter(&$variables) {
  // variable values to change
  $change = array(
    'cdn_status' => 0,
  );
  // loop through and change only set values
  foreach ($change as $var => $val) {
    if (isset($variables[$var])) {
      $variables[$var] = $val;
    }
  }
}